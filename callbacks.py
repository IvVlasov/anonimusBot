import data
import random
import key
from config import bot, dp, connection
from aiogram import  executor, types


@dp.callback_query_handler(lambda c: c.data.startswith('gender'))
async def set_user(call):
	value = int(call.data.split('_')[1])
	if data.find_chat_id(connection, call.message.chat.id) == 'ERROR':
		data.set_new_user(connection, call.message.chat.id, value)
	else:
		await call.message.answer('–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ',
										  reply_markup=key.main_menu())


@dp.message_handler(lambda message: message.text == 'üöª –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É')
async def findByGender(message:types.Message):
	await message.answer('–ö–∞–∫–æ–π –ø–æ–ª –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å?',
								reply_markup = key.genderMenu())


@dp.message_handler(lambda message: message.text == 'üé≤ –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞')
async def findChat(message:types.Message):
	data.update_status(connection, message.chat.id,1)
	if data.search_active_status(connection,message.chat.id, 1) == []  and\
			data.search_active_status(connection,message.chat.id,
		  data.read_gender(connection,message.chat.id)) == []:
		await message.answer('–ü–æ–¥–æ–∂–¥–∏—Ç–µ',reply_markup=key.stop())
	else:
		item1 = data.search_active_status(connection,message.chat.id, 1)
		item2 = data.search_active_status(connection,message.chat.id,
													 data.read_gender(connection,message.chat.id))
		# item3 = data.search_active_status(connection,message.chat.id, 3)
		# await message.answer(item2)
		count = item1 + item2
		value = random.randint(0, len(count) - 1)
		companion_id = count[value][0]
		data.update_status(connection, message.chat.id,0)
		data.update_status(connection, companion_id,0)
		data.update_companion(connection, message.chat.id, companion_id)
		data.update_companion(connection, companion_id, message.chat.id)	
		
		await message.answer('–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω', reply_markup =key.secondMenu())
		await bot.send_message(companion_id, text= '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω',
									  reply_markup =key.secondMenu())


@dp.message_handler(lambda message: message.text == '–°—Ç–æ–ø')
async def stopChat(message:types.Message):
	companion_id = data.read_companion(connection, message.chat.id)
	data.update_companion(connection, message.chat.id, 0)
	data.update_companion(connection, companion_id, 0)
	await message.answer('–ß–∞—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', reply_markup = key.main_menu())
	await bot.send_message(companion_id, text= '–ß–∞—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
								  reply_markup =key.main_menu())


@dp.message_handler(lambda message: message.text == '–ú—É–∂—Å–∫–æ–π')
async def findNewChat(message:types.Message):
	if data.read_subscribe(connection, message.chat.id) == 0:
		await message.answer('–î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –ø–æ–ª—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–¥–ø–∏—Å–∫–∞',
									reply_markup= key.buyButton())
	else:
		data.update_status(connection, message.chat.id,2)
		if data.search_active_gender(connection,message.chat.id, 2, 1) == [] and\
				data.search_active_gender(connection,message.chat.id, 2,
					data.read_gender(connection,message.chat.id)) == []:
			await message.answer(data.read_gender(connection,message.chat.id),
										reply_markup=key.stop())
		else:
			list1 = data.search_active_gender(connection,message.chat.id,2 ,1)
			list2 = data.search_active_gender(connection,message.chat.id, 2,
														 data.read_gender(connection,message.chat.id))
			count = list1 + list2

			value = random.randint(0, len(count) - 1)
			companion_id = count[value][0]

			data.update_status(connection, message.chat.id,0)
			data.update_status(connection, companion_id,0)
			data.update_companion(connection, message.chat.id, companion_id)
			data.update_companion(connection, companion_id, message.chat.id)	
			
			await message.answer('–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω', reply_markup =key.secondMenu())
			await bot.send_message(companion_id, text= '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω',
										  reply_markup =key.secondMenu())


@dp.message_handler(lambda message: message.text == '–ñ–µ–Ω—Å–∫–∏–π')
async def findNewChat(message:types.Message):
	if data.read_subscribe(connection, message.chat.id) == 0:
		await message.answer('–ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.'
									' \n –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.',
									reply_markup= key.buyButton())
	else:
		data.update_status(connection, message.chat.id,3)
		if data.search_active_gender(connection,message.chat.id, 3, 1) == [] and\
				data.search_active_gender(connection,message.chat.id, 3,
				data.read_gender(connection,message.chat.id)) == []:
			await message.answer(data.read_gender(connection,message.chat.id),
										reply_markup=key.stop())
		else:
			list1 = data.search_active_gender(connection,message.chat.id,3 ,1)
			list2 = data.search_active_gender(connection,message.chat.id, 3,
											data.read_gender(connection,message.chat.id))
			count = list1 + list2
			value = random.randint(0, len(count) - 1)
			companion_id = count[value][0]

			data.update_status(connection, message.chat.id,0)
			data.update_status(connection, companion_id,0)
			data.update_companion(connection, message.chat.id, companion_id)
			data.update_companion(connection, companion_id, message.chat.id)	
			
			await message.answer('–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω', reply_markup =key.secondMenu())
			await bot.send_message(companion_id, text= '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω',
										  reply_markup =key.secondMenu())


@dp.message_handler(lambda message: message.text == '–ù–æ–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫')
async def findNewChat(message:types.Message):
	await stopChat(message)
	await findChat(message)


@dp.message_handler(lambda message: message.text == '–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫')
async def findNewChat(message:types.Message):
	data.update_status(connection, message.chat.id, 0)
	await message.answer('–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', reply_markup = key.main_menu())


@dp.callback_query_handler(lambda c: c.data.startswith('payment'))
async def chek_payment(call):
	value = call.data.split('_')[1]
	await call.message.answer('PAy')




